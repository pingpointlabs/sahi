[project]
name = "sahi"
version = "0.11.36"
readme = "README.md"
description = "A vision library for performing sliced inference on large images/small objects"
requires-python = ">=3.8"
license = "MIT"
license-files = ["./LICENSE"]
dependencies = [
  "opencv-python<=4.11.0.86",
  "shapely>=2.0.0",
  "tqdm>=4.48.2",
  "pybboxes==0.1.6",
  "pillow>=8.2.0",
  "pyyaml",
  "fire",
  "terminaltables",
  "requests",
  "click",
  "torch>=2.4.1",
]

classifiers = [
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Intended Audience :: Developers",
  "Intended Audience :: Science/Research",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
  "Topic :: Software Development :: Libraries",
  "Topic :: Software Development :: Libraries :: Python Modules",
]
maintainers = [
  { name = "Fatih Cagatay Akyon (@fcakyon)" },
]

[project.urls]
"Homepage" = "https://github.com/obss/sahi"
"Source" = "https://github.com/obss/sahi"
"Documentation" = "https://github.com/obss/sahi/tree/main/docs"
"Bug Reports" = "https://github.com/obss/sahi/discussions/categories/q-a"
"Changelog" = "https://github.com/obss/sahi/releases"

[project.scripts]
sahi = "sahi.cli:app"

[dependency-groups]


[tool.uv]

# find-links = [
#   "http://download.openmmlab.com/mmcv/dist/cpu/torch2.1.0/index.html",
# ]

override-dependencies = ["pillow>=8.2.0"]

[tool.ruff]
target-version = "py38"
line-length = 120

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "__pycache__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "yarn-error.log",
    "yarn.lock",
    "docs",
]

[tool.ruff.lint]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
select = ["E", "F", "I", "A", "Q", "W", "RUF", "UP","FA"]
ignore = ["A002","A001"]
# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = [
    "A",
    "B",
    "C",
    "D",
    "E",
    "F",
    "G",
    "I",
    "N",
    "Q",
    "S",
    "T",
    "W",
    "ANN",
    "ARG",
    "BLE",
    "COM",
    "DJ",
    "DTZ",
    "EM",
    "ERA",
    "EXE",
    "FBT",
    "ICN",
    "INP",
    "ISC",
    "NPY",
    "PD",
    "PGH",
    "PIE",
    "PL",
    "PT",
    "PTH",
    "PYI",
    "RET",
    "RSE",
    "RUF",
    "SIM",
    "SLF",
    "TCH",
    "TID",
    "TRY",
    "UP",
    "YTT",
    "FA"
]
unfixable = []
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
pylint.max-args = 20

[tool.ruff.lint.flake8-quotes]
inline-quotes = "double"
multiline-quotes = "double"
docstring-quotes = "double"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402", "F401"]

[tool.ruff.lint.mccabe]
# Flag errors (`C901`) whenever the complexity level exceeds 5.
max-complexity = 20

[tool.ruff.lint.isort]
order-by-type = true
no-sections = false

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["--import-mode=importlib", "--no-header"]
pythonpath = ["."]

[tool.typos.default]
extend-ignore-identifiers-re = ["fo"]

[tool.hatch.version]
path = "sahi/__init__.py"

[tool.hatch.envs.default]
type = "pip-compile"

[tool.hatch.env]
requires = ["hatch-mkdocs", "hatch-pip-compile"]

[tool.hatch.envs.docs]
detached = false

[tool.hatch.build.targets.wheel]
packages = ["sahi"]

[tool.hatch.envs.default.scripts]

# Workaround for https://github.com/juftin/hatch-pip-compile/issues/85
#Â PR https://github.com/pypa/hatch/pull/1882
dependencies = [
    "pip",
]

all = [
    "hatch run style:check",
]

[tool.hatch.envs.style]
pip-compile-verbose = true
detached = true

dependencies = [
    "ruff",
]

[tool.hatch.envs.style.scripts]
categories = [
    "lint",
    "format",
]

check = [
    "ruff check . --fix",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"
